{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a directions request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.directions\n * @function\n * @param {Object} query\n * @param {LatLng} query.origin\n * @param {LatLng} query.destination\n * @param {string} [query.mode]\n * @param {LatLng[]} [query.waypoints]\n * @param {boolean} [query.alternatives]\n * @param {string[]} [query.avoid]\n * @param {string} [query.language]\n * @param {string} [query.units]\n * @param {string} [query.region]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string} [query.traffic_model]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {boolean} [query.optimize]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.directions = {\n  url: 'https://maps.googleapis.com/maps/api/directions/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']), v.object({\n    origin: utils.latLng,\n    destination: utils.latLng,\n    mode: v.optional(v.oneOf(['driving', 'walking', 'bicycling', 'transit'])),\n    waypoints: v.optional(utils.arrayOf(utils.latLng)),\n    alternatives: v.optional(v.boolean),\n    avoid: v.optional(utils.arrayOf(v.oneOf(['tolls', 'highways', 'ferries', 'indoor']))),\n    language: v.optional(v.string),\n    units: v.optional(v.oneOf(['metric', 'imperial'])),\n    region: v.optional(v.string),\n    departure_time: v.optional(utils.timeStamp),\n    arrival_time: v.optional(utils.timeStamp),\n    traffic_model: v.optional(v.oneOf(['best_guess', 'pessimistic', 'optimistic'])),\n    transit_mode: v.optional(utils.arrayOf(v.oneOf(['bus', 'subway', 'train', 'tram', 'rail']))),\n    transit_routing_preference: v.optional(v.oneOf(['less_walking', 'fewer_transfers'])),\n    optimize: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  }), function (query) {\n    if (query.waypoints && query.optimize) {\n      query.waypoints = 'optimize:true|' + query.waypoints;\n    }\n\n    delete query.optimize;\n\n    if (query.waypoints && query.mode === 'transit') {\n      throw new v.InvalidValueError('cannot specify waypoints with transit');\n    }\n\n    if (query.traffic_model && !query.departure_time) {\n      throw new v.InvalidValueError('traffic_model requires departure_time');\n    }\n\n    return query;\n  }])\n};","map":null,"metadata":{},"sourceType":"script"}