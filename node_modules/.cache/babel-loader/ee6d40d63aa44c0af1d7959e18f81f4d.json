{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Validate = exports;\n\nfunction InvalidValueError(message) {\n  this.message = message;\n  this.name = 'InvalidValueError';\n  Error.captureStackTrace(this, InvalidValueError);\n}\n\nInvalidValueError.prototype = Object.create(Error.prototype);\nInvalidValueError.prototype.constructor = InvalidValueError;\n\nInvalidValueError.prepend = function (message, error) {\n  if (error instanceof InvalidValueError) {\n    return new InvalidValueError(message + ': ' + error.message);\n  }\n\n  return error;\n};\n\nValidate.InvalidValueError = InvalidValueError;\n\nValidate.acceptAll = function (value) {\n  return value;\n};\n\nValidate.optional = function (validator) {\n  return function (value) {\n    return value == undefined ? value : validator(value);\n  };\n};\n\nValidate.that = function (predicate, message) {\n  return function (value) {\n    if (predicate(value)) return value;\n    throw new InvalidValueError(message);\n  };\n};\n\nValidate.number = Validate.that(function (value) {\n  return typeof value === 'number';\n}, 'not a number');\nValidate.string = Validate.that(function (value) {\n  return typeof value === 'string';\n}, 'not a string');\n\nValidate.object = function (propertyValidators) {\n  return function (object) {\n    var result = {};\n\n    if (!object || typeof object !== 'object') {\n      throw new InvalidValueError('not an Object');\n    } // Validate all properties.\n\n\n    for (key in propertyValidators) {\n      var validator = propertyValidators[key];\n\n      try {\n        var valid = validator(object[key]);\n      } catch (error) {\n        if (key in object) {\n          throw InvalidValueError.prepend('in property \"' + key + '\"', error);\n        } else {\n          throw new InvalidValueError('missing property \"' + key + '\"');\n        }\n      }\n\n      if (valid !== undefined) {\n        result[key] = valid;\n      }\n    } // Check for unexpected properties.\n\n\n    for (var key in object) {\n      if (!propertyValidators[key]) {\n        throw new InvalidValueError('unexpected property \"' + key + '\"');\n      }\n    }\n\n    return result;\n  };\n};\n\nValidate.array = function (validator) {\n  return function (array) {\n    var result = [];\n\n    if (Object.prototype.toString.call(array) !== '[object Array]') {\n      throw new InvalidValueError('not an Array');\n    }\n\n    for (var i = 0; i < array.length; ++i) {\n      try {\n        result[i] = validator(array[i]);\n      } catch (error) {\n        throw InvalidValueError.prepend('at index ' + i, error);\n      }\n    }\n\n    return result;\n  };\n};\n\nValidate.oneOf = function (names) {\n  var myObject = {};\n  var quotedNames = [];\n  names.forEach(function (name) {\n    myObject[name] = true;\n    quotedNames.push('\"' + name + '\"');\n  });\n  return function (value) {\n    if (myObject[value]) return value;\n    throw new InvalidValueError('not one of ' + quotedNames.join(', '));\n  };\n};\n\nValidate.mutuallyExclusiveProperties = function (names, oneRequired) {\n  return function (value) {\n    if (!value) return value;\n    var present = [];\n    var quotedNames = [];\n    names.forEach(function (name) {\n      if (name in value) {\n        present.push('\"' + name + '\"');\n      }\n\n      quotedNames.push('\"' + name + '\"');\n    });\n\n    if (present.length > 1) {\n      throw new InvalidValueError('cannot specify properties ' + present.slice(0, -1).join(', ') + ' and ' + present.slice(-1) + ' together');\n    } else if (present.length == 0 && oneRequired) {\n      throw new InvalidValueError('one of ' + quotedNames.join(', ') + ' is required');\n    }\n\n    return value;\n  };\n};\n\nValidate.mutuallyExclusivePropertiesRequired = function (names) {\n  return Validate.mutuallyExclusiveProperties(names, true);\n};\n\nValidate.compose = function (validators) {\n  return function (value) {\n    validators.forEach(function (validate) {\n      value = validate(value);\n    });\n    return value;\n  };\n};\n\nValidate.boolean = Validate.compose([Validate.that(function (value) {\n  return typeof value === 'boolean';\n}, 'not a boolean'), function (value) {\n  // In each API, boolean fields default to false, and the presence of\n  // a querystring value indicates true, so we omit the value if\n  // explicitly set to false.\n  return value ? value : undefined;\n}]);","map":null,"metadata":{},"sourceType":"script"}