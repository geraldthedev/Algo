{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar v = require('./validate');\n\nvar asArray = function asArray(arg) {\n  return Array.isArray(arg) ? arg : [arg];\n};\n\nexports.pipedKeyValues = function (arg) {\n  if (!arg || typeof arg !== 'object') {\n    throw new v.InvalidValueError('not an Object');\n  }\n\n  return Object.keys(arg).sort().map(function (key) {\n    return key + ':' + arg[key];\n  }).join('|');\n};\n\nexports.locations = function (arg) {\n  if (Array.isArray(arg) && arg.length == 2 && typeof arg[0] == 'number' && typeof arg[1] == 'number') {\n    arg = [arg];\n  }\n\n  return asArray(arg).map(exports.latLng).join('|');\n};\n\nexports.arrayOf = function (validateItem, sep) {\n  var validateArray = v.array(validateItem);\n  return function (value) {\n    value = validateArray(asArray(value));\n    return value.join(sep || '|');\n  };\n};\n\nexports.latLng = function (arg) {\n  if (!arg) {\n    throw new v.InvalidValueError();\n  } else if (arg.lat != undefined && arg.lng != undefined) {\n    arg = [arg.lat, arg.lng];\n  } else if (arg.latitude != undefined && arg.longitude != undefined) {\n    arg = [arg.latitude, arg.longitude];\n  }\n\n  return asArray(arg).join(',');\n};\n\nvar validateBounds = v.object({\n  south: v.number,\n  west: v.number,\n  north: v.number,\n  east: v.number\n});\n\nexports.bounds = function (arg) {\n  arg = validateBounds(arg);\n  return arg.south + ',' + arg.west + '|' + arg.north + ',' + arg.east;\n};\n\nexports.timeStamp = function (arg) {\n  if (arg == undefined) {\n    arg = new Date();\n  }\n\n  if (arg.getTime) {\n    arg = arg.getTime(); // NOTE: Unix time is seconds past epoch.\n\n    return Math.round(arg / 1000);\n  } // Otherwise assume arg is Unix time\n\n\n  return arg;\n};\n\nexports.retryOptions = v.object({\n  timeout: v.optional(v.number),\n  interval: v.optional(v.number),\n  increment: v.optional(v.number),\n  jitter: v.optional(v.number)\n});","map":null,"metadata":{},"sourceType":"script"}