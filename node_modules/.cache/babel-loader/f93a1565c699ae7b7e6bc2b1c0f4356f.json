{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * A Find Place request takes a text input, and returns a place.\n * The text input can be any kind of Places data, for example,\n * a name, address, or phone number.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.findPlace\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.inputtype\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.findPlace = {\n  url: 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json',\n  validator: v.compose([v.object({\n    input: v.string,\n    inputtype: v.oneOf(['textquery', 'phonenumber']),\n    language: v.optional(v.string),\n    fields: v.optional(utils.arrayOf(v.oneOf(['formatted_address', 'geometry', 'icon', 'id', 'name', 'permanently_closed', 'photos', 'place_id', 'scope', 'types', 'vicinity', 'opening_hours', 'price_level', 'rating']), ',')),\n    locationbias: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  }), function (query) {\n    if (!query.locationbias || query.locationbias == 'ipbias') {\n      return query;\n    }\n\n    var isLatLng = function isLatLng(latLng) {\n      latLng = latLng.split(',');\n      return latLng.length == 2 && !isNaN(latLng[0]) && !isNaN(latLng[1]);\n    };\n\n    var parts = query.locationbias.split(':');\n\n    switch (parts[0]) {\n      case 'point':\n        if (isLatLng(parts[parts.length - 1])) {\n          return query;\n        }\n\n        break;\n\n      case 'circle':\n        parts = parts[parts.length - 1].split('@');\n\n        if (!isNaN(parts[0]) && isLatLng(parts[parts.length - 1])) {\n          return query;\n        }\n\n        break;\n\n      case 'rectangle':\n        parts = parts[parts.length - 1].split('|');\n\n        if (parts.length == 2 && isLatLng(parts[0]) && isLatLng(parts[1])) {\n          return query;\n        }\n\n        break;\n    }\n\n    throw new v.InvalidValueError('invalid locationbias');\n  }])\n};\n/**\n * Makes a places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.places\n * @function\n * @param {Object} query\n * @param {string} query.query\n * @param {string} [query.language]\n * @param {LatLng} [query.location]\n * @param {number} [query.radius]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {boolean} [query.opennow]\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {string} [query.region]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.places = {\n  url: 'https://maps.googleapis.com/maps/api/place/textsearch/json',\n  validator: v.object({\n    query: v.optional(v.string),\n    language: v.optional(v.string),\n    location: v.optional(utils.latLng),\n    radius: v.optional(v.number),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    opennow: v.optional(v.boolean),\n    type: v.optional(v.string),\n    pagetoken: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number),\n    region: v.optional(v.string)\n  })\n};\n/**\n * Makes a nearby places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesNearby\n * @function\n * @param {Object} query\n * @param {LatLng} query.location\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {string} [query.keyword]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {string} [query.name]\n * @param {boolean} [query.opennow]\n * @param {string} [query.rankby] Either 'prominence' or 'distance'\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesNearby = {\n  url: 'https://maps.googleapis.com/maps/api/place/nearbysearch/json',\n  validator: v.compose([v.mutuallyExclusivePropertiesRequired(['location', 'pagetoken']), v.object({\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    keyword: v.optional(v.string),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    name: v.optional(v.string),\n    opennow: v.optional(v.boolean),\n    rankby: v.optional(v.oneOf(['prominence', 'distance'])),\n    type: v.optional(v.string),\n    pagetoken: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};\n/**\n * Makes a places radar search request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesRadar\n * @function\n * @param {Object} query\n * @param {LatLng} query.location\n * @param {number} query.radius\n * @param {string} [query.language]\n * @param {string} [query.keyword]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {string} [query.name]\n * @param {boolean} [query.opennow]\n * @param {string} [query.type]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesRadar = {\n  url: 'https://maps.googleapis.com/maps/api/place/radarsearch/json',\n  validator: v.object({\n    location: utils.latLng,\n    radius: v.number,\n    language: v.optional(v.string),\n    keyword: v.optional(v.string),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    name: v.optional(v.string),\n    opennow: v.optional(v.boolean),\n    type: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a place detail request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.place\n * @function\n * @param {Object} query\n * @param {string} query.placeid\n * @param {string} [query.sessiontoken]\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.place = {\n  url: 'https://maps.googleapis.com/maps/api/place/details/json',\n  validator: v.object({\n    placeid: v.string,\n    sessiontoken: v.optional(v.string),\n    language: v.optional(v.string),\n    fields: v.optional(utils.arrayOf(v.oneOf(['address_component', 'adr_address', 'alt_id', 'formatted_address', 'geometry', 'icon', 'id', 'name', 'permanently_closed', 'photo', 'place_id', 'scope', 'type', 'url', 'utc_offset', 'vicinity', 'formatted_phone_number', 'international_phone_number', 'opening_hours', 'website', 'price_level', 'rating', 'review']), ',')),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a place photos request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesPhoto\n * @function\n * @param {Object} query\n * @param {string} query.photoreference\n * @param {number} [query.maxwidth]\n * @param {number} [query.maxheight]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesPhoto = {\n  url: 'https://maps.googleapis.com/maps/api/place/photo',\n  validator: v.object({\n    photoreference: v.string,\n    maxwidth: v.optional(v.number),\n    maxheight: v.optional(v.number),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a places autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.sessiontoken\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {string} [query.types]\n * @param {Array<string>} [query.components]\n * @param {boolean} [query.strictbounds]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/autocomplete/json',\n  validator: v.object({\n    input: v.string,\n    sessiontoken: v.string,\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    types: v.optional(v.oneOf(['geocode', 'address', 'establishment', '(regions)', '(cities)'])),\n    components: v.optional(utils.pipedKeyValues),\n    strictbounds: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a places query autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesQueryAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesQueryAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/queryautocomplete/json',\n  validator: v.object({\n    input: v.string,\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":null,"metadata":{},"sourceType":"script"}