{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geocode\n * @function\n * @param {Object} query\n * @param {string} [query.address]\n * @param {Object} [query.components]\n * @param {Object} [query.bounds]\n * @param {number} query.bounds.south\n * @param {number} query.bounds.west\n * @param {number} query.bounds.north\n * @param {number} query.bounds.east\n * @param {string} [query.region]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.geocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.object({\n    address: v.optional(v.string),\n    components: v.optional(utils.pipedKeyValues),\n    bounds: v.optional(utils.bounds),\n    region: v.optional(v.string),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a reverse geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.reverseGeocode\n * @function\n * @param {Object} query\n * @param {LatLng} [query.latlng]\n * @param {string} [query.place_id]\n * @param {string} [query.result_type]\n * @param {string} [query.location_type]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.reverseGeocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['place_id', 'latlng']), v.mutuallyExclusiveProperties(['place_id', 'result_type']), v.mutuallyExclusiveProperties(['place_id', 'location_type']), v.object({\n    latlng: v.optional(utils.latLng),\n    place_id: v.optional(v.string),\n    result_type: v.optional(utils.arrayOf(v.string)),\n    location_type: v.optional(utils.arrayOf(v.oneOf(['ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE']))),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};","map":null,"metadata":{},"sourceType":"script"}