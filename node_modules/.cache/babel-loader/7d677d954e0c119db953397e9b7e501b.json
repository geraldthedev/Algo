{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a distance matrix request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.distanceMatrix\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.origins\n * @param {LatLng[]} query.destinations\n * @param {string} [query.mode]\n * @param {string} [query.language]\n * @param {string[]} [query.avoid]\n * @param {string} [query.units]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {string} [query.traffic_model]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.distanceMatrix = {\n  url: 'https://maps.googleapis.com/maps/api/distancematrix/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']), v.object({\n    origins: utils.arrayOf(utils.latLng),\n    destinations: utils.arrayOf(utils.latLng),\n    mode: v.optional(v.oneOf(['driving', 'walking', 'bicycling', 'transit'])),\n    language: v.optional(v.string),\n    region: v.optional(v.string),\n    avoid: v.optional(utils.arrayOf(v.oneOf(['tolls', 'highways', 'ferries', 'indoor']))),\n    units: v.optional(v.oneOf(['metric', 'imperial'])),\n    departure_time: v.optional(utils.timeStamp),\n    arrival_time: v.optional(utils.timeStamp),\n    transit_mode: v.optional(utils.arrayOf(v.oneOf(['bus', 'subway', 'train', 'tram', 'rail']))),\n    transit_routing_preference: v.optional(v.oneOf(['less_walking', 'fewer_transfers'])),\n    traffic_model: v.optional(v.oneOf(['best_guess', 'pessimistic', 'optimistic'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};","map":null,"metadata":{},"sourceType":"script"}