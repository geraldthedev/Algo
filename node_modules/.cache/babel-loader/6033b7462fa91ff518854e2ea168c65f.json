{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar CircularBuffer = require('./circular-buffer');\n\nvar Task = require('./task');\n\nexports.inject = function (wait, getTime) {\n  return {\n    /**\n     * Creates a ThrottledQueue. The queue stores tasks, which will be executed\n     * asynchronously, at a controlled rate.\n     *\n     * @param {number} limit The maximum number of tasks that can be executed\n     *     over one period.\n     * @param {number} period The time period (ms) over which limit is\n     *     enforceable.\n     * @return {ThrottledQueue}\n     */\n    create: function create(limit, period) {\n      var me = {};\n      var queue = Task.withValue();\n      var recentTimes = CircularBuffer.create(limit);\n      /**\n       * Adds a task to the work queue.\n       *\n       * @param {function(): Task<T>} doSomething Starts the task. This function\n       *     will be called when the rate limit allows.\n       * @return {Task<T>} The delayed task.\n       * @template T\n       */\n\n      me.add = function (doSomething) {\n        // Return a separate task from the queue, so that cancelling a task\n        // doesn't propagate back and cancel the whole queue.\n        var waitForMyTurn = Task.start(function (resolve) {\n          queue.finally(resolve);\n        }).thenDo(function () {\n          var lastTime = recentTimes.item(limit - 1);\n          if (lastTime == undefined) return;\n          return wait(Math.max(lastTime + period - getTime(), 0));\n        }).thenDo(function () {\n          recentTimes.insert(getTime());\n        });\n        queue = queue.thenDo(function () {\n          return Task.start(function (resolve) {\n            waitForMyTurn.finally(resolve);\n          });\n        });\n        return waitForMyTurn.thenDo(doSomething);\n      };\n\n      return me;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}