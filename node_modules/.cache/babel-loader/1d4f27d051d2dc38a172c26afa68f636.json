{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Google Maps Service module.\n * @module @google/maps\n */\n\n/**\n * Creates a Google Maps client. The client object contains all the API methods.\n *\n * @param {Object} options\n * @param {string} options.key API key (required, unless clientID and\n *     clientSecret provided).\n * @param {string=} options.clientId Maps API for Work client ID.\n * @param {string=} options.clientSecret Maps API for Work client secret (a.k.a.\n *     private key).\n * @param {string=} options.channel Maps API for Work channel.\n * @param {number=} options.timeout Timeout in milliseconds.\n *     (Default: 60 * 1000 ms)\n * @param {string=} options.language Default language for all queries.\n        See https://developers.google.com/maps/faq#languagesupport\n * @param {number=} options.rate.limit Controls rate-limiting of requests.\n *     Maximum number of requests per period. (Default: 50)\n * @param {number=} options.rate.period Period for rate limit, in milliseconds.\n *     (Default: 1000 ms)\n * @param {number=} options.retryOptions.interval If a transient server error\n *     occurs, how long to wait before retrying the request, in milliseconds.\n *     (Default: 500 ms)\n * @param {Function=} options.Promise - Promise constructor (optional).\n * @return {GoogleMapsClient} The client object containing all API methods.\n */\nexports.createClient = function (options) {\n  options = options || {};\n\n  var makeApiCall = require('./internal/make-api-call').inject(options);\n\n  var deprecate = require('util').deprecate;\n\n  var makeApiMethod = function makeApiMethod(apiConfig) {\n    return function (query, callback, customParams) {\n      query = apiConfig.validator(query);\n      query.supportsClientId = apiConfig.supportsClientId !== false;\n      query.options = apiConfig.options;\n\n      if (options.language && !query.language) {\n        query.language = options.language;\n      } // Merge query and customParams.\n\n\n      var finalQuery = {};\n      customParams = customParams || {};\n      [customParams, query].map(function (obj) {\n        Object.keys(obj).sort().map(function (key) {\n          finalQuery[key] = obj[key];\n        });\n      });\n      return makeApiCall(apiConfig.url, finalQuery, callback);\n    };\n  };\n\n  var geocode = require('./apis/geocode');\n\n  var geolocation = require('./apis/geolocation');\n\n  var timezone = require('./apis/timezone');\n\n  var directions = require('./apis/directions');\n\n  var distanceMatrix = require('./apis/distance-matrix');\n\n  var elevation = require('./apis/elevation');\n\n  var roads = require('./apis/roads');\n\n  var places = require('./apis/places');\n\n  return {\n    directions: makeApiMethod(directions.directions),\n    distanceMatrix: makeApiMethod(distanceMatrix.distanceMatrix),\n    elevation: makeApiMethod(elevation.elevation),\n    elevationAlongPath: makeApiMethod(elevation.elevationAlongPath),\n    geocode: makeApiMethod(geocode.geocode),\n    geolocate: makeApiMethod(geolocation.geolocate),\n    reverseGeocode: makeApiMethod(geocode.reverseGeocode),\n    findPlace: makeApiMethod(places.findPlace),\n    places: makeApiMethod(places.places),\n    placesNearby: makeApiMethod(places.placesNearby),\n    placesRadar: deprecate(makeApiMethod(places.placesRadar), 'placesRadar is deprecated, see http://goo.gl/BGiumE'),\n    place: makeApiMethod(places.place),\n    placesPhoto: makeApiMethod(places.placesPhoto),\n    placesAutoComplete: makeApiMethod(places.placesAutoComplete),\n    placesQueryAutoComplete: makeApiMethod(places.placesQueryAutoComplete),\n    snapToRoads: makeApiMethod(roads.snapToRoads),\n    nearestRoads: makeApiMethod(roads.nearestRoads),\n    speedLimits: makeApiMethod(roads.speedLimits),\n    snappedSpeedLimits: makeApiMethod(roads.snappedSpeedLimits),\n    timezone: makeApiMethod(timezone.timezone)\n  };\n};\n\nexports.cli = require('./internal/cli');\nexports.util = require('./util');","map":null,"metadata":{},"sourceType":"script"}