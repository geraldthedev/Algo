{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar https = require('https');\n\nvar parse = require('url').parse;\n\nvar version = require('../version'); // add keep-alive header to speed up request\n\n\nvar agent = new https.Agent({\n  keepAlive: true\n});\n/**\n * Makes a secure HTTP GET request for the given URL.\n *\n * Calls the callback with two parameters (err, response). If there was an\n * error, response should be null. If there was no error, err should be null,\n * and response should be an object with these properties\n * {\n *   status: number,\n *   headers: Object,\n *   json: Object\n * }\n *\n * Returns a function that cancels the request.\n *\n * @param {string} url\n * @param {function(ClientResponse)} onSuccess\n * @param {function(?)} onError\n * @param {Object} options\n * @return {function()}\n */\n\nmodule.exports = function makeUrlRequest(url, onSuccess, onError, options) {\n  var requestOptions = parse(url);\n  var body; // Allow each API to provide some of the request options such as the\n  // HTTP method, headers, etc.\n\n  if (options) {\n    for (var k in options) {\n      if (k === 'body') {\n        body = options[k];\n      } else {\n        requestOptions[k] = options[k];\n      }\n    }\n  }\n\n  requestOptions.headers = requestOptions.headers || {};\n  requestOptions.headers['User-Agent'] = 'GoogleGeoApiClientJS/' + version;\n  var request = https.request(requestOptions, function (response) {\n    response.on('error', function (error) {\n      onError(error);\n    });\n\n    if (response.statusCode === 302) {\n      // Handle redirect.\n      var url = response.headers['location'];\n      makeUrlRequest(url, onSuccess, onError, options);\n    } else if (response.headers['content-type'] == 'application/json; charset=UTF-8') {\n      // Handle JSON.\n      var data = [];\n      response.on('data', function (chunk) {\n        data.push(chunk);\n      });\n      response.on('end', function () {\n        var json;\n\n        try {\n          json = JSON.parse(Buffer.concat(data).toString());\n        } catch (error) {\n          onError(error);\n          return;\n        }\n\n        onSuccess({\n          status: response.statusCode,\n          headers: response.headers,\n          json: json\n        });\n      });\n    } else {\n      // Fallback is for binary data, namely places photo download,\n      // so just provide the response stream. Also provide the same\n      // consistent name for status checking as per JSON responses.\n      response.status = response.statusCode;\n      onSuccess(response);\n    }\n  }).on('error', function (error) {\n    onError(error);\n  });\n\n  if (body) {\n    request.write(JSON.stringify(body));\n  }\n\n  request.end();\n  return function cancel() {\n    request.abort();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}